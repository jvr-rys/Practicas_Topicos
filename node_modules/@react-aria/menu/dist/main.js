var $6RQwO$reactariautils = require("@react-aria/utils");
var $6RQwO$reactariainteractions = require("@react-aria/interactions");
var $6RQwO$reactariai18n = require("@react-aria/i18n");
var $6RQwO$reactariaoverlays = require("@react-aria/overlays");
var $6RQwO$reactariaselection = require("@react-aria/selection");
var $6RQwO$reactstatelycollections = require("@react-stately/collections");

function $parcel$exportWildcard(dest, source) {
  Object.keys(source).forEach(function(key) {
    if (key === 'default' || key === '__esModule' || dest.hasOwnProperty(key)) {
      return;
    }

    Object.defineProperty(dest, key, {
      enumerable: true,
      get: function get() {
        return source[key];
      }
    });
  });

  return dest;
}
function $parcel$interopDefault(a) {
  return a && a.__esModule ? a.default : a;
}
function $parcel$export(e, n, v, s) {
  Object.defineProperty(e, n, {get: v, set: s, enumerable: true, configurable: true});
}
var $09e9a80ccce757b5$exports = {};

$parcel$export($09e9a80ccce757b5$exports, "useMenuTrigger", () => $09e9a80ccce757b5$export$dc9c12ed27dd1b49);
var $1d5711155cdf93a8$exports = {};
var $f33b5c18f6779b3c$exports = {};
$f33b5c18f6779b3c$exports = JSON.parse("{\"longPressMessage\":\"اضغط مطولاً أو اضغط على Alt + السهم لأسفل لفتح القائمة\"}");


var $d5371499419073ee$exports = {};
$d5371499419073ee$exports = JSON.parse("{\"longPressMessage\":\"Натиснете продължително или натиснете Alt+ стрелка надолу, за да отворите менюто\"}");


var $089b21910475b663$exports = {};
$089b21910475b663$exports = JSON.parse("{\"longPressMessage\":\"Dlouhým stiskem nebo stisknutím kláves Alt + šipka dolů otevřete nabídku\"}");


var $bf72529f97a57beb$exports = {};
$bf72529f97a57beb$exports = JSON.parse("{\"longPressMessage\":\"Langt tryk eller tryk på Alt + pil ned for at åbne menuen\"}");


var $4ff514837031fd38$exports = {};
$4ff514837031fd38$exports = JSON.parse("{\"longPressMessage\":\"Drücken Sie lange oder drücken Sie Alt + Nach-unten, um das Menü zu öffnen\"}");


var $ba452feab875ffa9$exports = {};
$ba452feab875ffa9$exports = JSON.parse("{\"longPressMessage\":\"Πιέστε παρατεταμένα ή πατήστε Alt + κάτω βέλος για να ανοίξετε το μενού\"}");


var $c9938238586151ac$exports = {};
$c9938238586151ac$exports = JSON.parse("{\"longPressMessage\":\"Long press or press Alt + ArrowDown to open menu\"}");


var $f12f26cb7e215dd0$exports = {};
$f12f26cb7e215dd0$exports = JSON.parse("{\"longPressMessage\":\"Mantenga pulsado o pulse Alt + flecha abajo para abrir el menú\"}");


var $9a682c43aed55f38$exports = {};
$9a682c43aed55f38$exports = JSON.parse("{\"longPressMessage\":\"Menüü avamiseks vajutage pikalt või vajutage klahve Alt + allanool\"}");


var $ea94057f9debf4b2$exports = {};
$ea94057f9debf4b2$exports = JSON.parse("{\"longPressMessage\":\"Avaa valikko painamalla pohjassa tai näppäinyhdistelmällä Alt + Alanuoli\"}");


var $97c546cbf5dd9974$exports = {};
$97c546cbf5dd9974$exports = JSON.parse("{\"longPressMessage\":\"Appuyez de manière prolongée ou appuyez sur Alt + Flèche vers le bas pour ouvrir le menu.\"}");


var $92aa1804be9e9fa9$exports = {};
$92aa1804be9e9fa9$exports = JSON.parse("{\"longPressMessage\":\"לחץ לחיצה ארוכה או הקש Alt + ArrowDown כדי לפתוח את התפריט\"}");


var $4521b2320dac8b30$exports = {};
$4521b2320dac8b30$exports = JSON.parse("{\"longPressMessage\":\"Dugo pritisnite ili pritisnite Alt + strelicu prema dolje za otvaranje izbornika\"}");


var $4e8f16daf5215938$exports = {};
$4e8f16daf5215938$exports = JSON.parse("{\"longPressMessage\":\"Nyomja meg hosszan, vagy nyomja meg az Alt + lefele nyíl gombot a menü megnyitásához\"}");


var $8d231998445afff0$exports = {};
$8d231998445afff0$exports = JSON.parse("{\"longPressMessage\":\"Premere a lungo o premere Alt + Freccia giù per aprire il menu\"}");


var $8b2815f9fa0bfca5$exports = {};
$8b2815f9fa0bfca5$exports = JSON.parse("{\"longPressMessage\":\"長押しまたは Alt+下矢印キーでメニューを開く\"}");


var $e73326d8496770fd$exports = {};
$e73326d8496770fd$exports = JSON.parse("{\"longPressMessage\":\"길게 누르거나 Alt + 아래쪽 화살표를 눌러 메뉴 열기\"}");


var $45a2e4406c6ec89e$exports = {};
$45a2e4406c6ec89e$exports = JSON.parse("{\"longPressMessage\":\"Norėdami atidaryti meniu, nuspaudę palaikykite arba paspauskite „Alt + ArrowDown“.\"}");


var $0007bc6514bdf94c$exports = {};
$0007bc6514bdf94c$exports = JSON.parse("{\"longPressMessage\":\"Lai atvērtu izvēlni, turiet nospiestu vai nospiediet taustiņu kombināciju Alt + lejupvērstā bultiņa\"}");


var $e3c493d70cc6db44$exports = {};
$e3c493d70cc6db44$exports = JSON.parse("{\"longPressMessage\":\"Langt trykk eller trykk Alt + PilNed for å åpne menyen\"}");


var $6f2c0458adcedfc4$exports = {};
$6f2c0458adcedfc4$exports = JSON.parse("{\"longPressMessage\":\"Druk lang op Alt + pijl-omlaag of druk op Alt om het menu te openen\"}");


var $a30dba0e3d036c39$exports = {};
$a30dba0e3d036c39$exports = JSON.parse("{\"longPressMessage\":\"Naciśnij i przytrzymaj lub naciśnij klawisze Alt + Strzałka w dół, aby otworzyć menu\"}");


var $6f919629ef2e1c62$exports = {};
$6f919629ef2e1c62$exports = JSON.parse("{\"longPressMessage\":\"Pressione e segure ou pressione Alt + Seta para baixo para abrir o menu\"}");


var $28d1e3bf8994ca96$exports = {};
$28d1e3bf8994ca96$exports = JSON.parse("{\"longPressMessage\":\"Prima continuamente ou prima Alt + Seta Para Baixo para abrir o menu\"}");


var $b3437fb2e3ddb32d$exports = {};
$b3437fb2e3ddb32d$exports = JSON.parse("{\"longPressMessage\":\"Apăsați lung sau apăsați pe Alt + săgeată în jos pentru a deschide meniul\"}");


var $5541691187ca14c1$exports = {};
$5541691187ca14c1$exports = JSON.parse("{\"longPressMessage\":\"Нажмите и удерживайте или нажмите Alt + Стрелка вниз, чтобы открыть меню\"}");


var $b48c119005e31a62$exports = {};
$b48c119005e31a62$exports = JSON.parse("{\"longPressMessage\":\"Ponuku otvoríte dlhým stlačením alebo stlačením klávesu Alt + klávesu so šípkou nadol\"}");


var $741e7b53e60b061a$exports = {};
$741e7b53e60b061a$exports = JSON.parse("{\"longPressMessage\":\"Za odprtje menija pritisnite in držite gumb ali pritisnite Alt+puščica navzdol\"}");


var $b1ce8bd69a3b5574$exports = {};
$b1ce8bd69a3b5574$exports = JSON.parse("{\"longPressMessage\":\"Dugo pritisnite ili pritisnite Alt + strelicu prema dole da otvorite meni\"}");


var $8f32a99efae22cc9$exports = {};
$8f32a99efae22cc9$exports = JSON.parse("{\"longPressMessage\":\"Håll nedtryckt eller tryck på Alt + pil nedåt för att öppna menyn\"}");


var $89571b9fe6b62049$exports = {};
$89571b9fe6b62049$exports = JSON.parse("{\"longPressMessage\":\"Menüyü açmak için uzun basın veya Alt + Aşağı Ok tuşuna basın\"}");


var $4a43dd6fd8b0af8e$exports = {};
$4a43dd6fd8b0af8e$exports = JSON.parse("{\"longPressMessage\":\"Довго або звичайно натисніть комбінацію клавіш Alt і стрілка вниз, щоб відкрити меню\"}");


var $92e311b3a49e73b5$exports = {};
$92e311b3a49e73b5$exports = JSON.parse("{\"longPressMessage\":\"长按或按 Alt + 向下方向键以打开菜单\"}");


var $3c2a22427dbfaab5$exports = {};
$3c2a22427dbfaab5$exports = JSON.parse("{\"longPressMessage\":\"長按或按 Alt+向下鍵以開啟功能表\"}");


$1d5711155cdf93a8$exports = {
    "ar-AE": $f33b5c18f6779b3c$exports,
    "bg-BG": $d5371499419073ee$exports,
    "cs-CZ": $089b21910475b663$exports,
    "da-DK": $bf72529f97a57beb$exports,
    "de-DE": $4ff514837031fd38$exports,
    "el-GR": $ba452feab875ffa9$exports,
    "en-US": $c9938238586151ac$exports,
    "es-ES": $f12f26cb7e215dd0$exports,
    "et-EE": $9a682c43aed55f38$exports,
    "fi-FI": $ea94057f9debf4b2$exports,
    "fr-FR": $97c546cbf5dd9974$exports,
    "he-IL": $92aa1804be9e9fa9$exports,
    "hr-HR": $4521b2320dac8b30$exports,
    "hu-HU": $4e8f16daf5215938$exports,
    "it-IT": $8d231998445afff0$exports,
    "ja-JP": $8b2815f9fa0bfca5$exports,
    "ko-KR": $e73326d8496770fd$exports,
    "lt-LT": $45a2e4406c6ec89e$exports,
    "lv-LV": $0007bc6514bdf94c$exports,
    "nb-NO": $e3c493d70cc6db44$exports,
    "nl-NL": $6f2c0458adcedfc4$exports,
    "pl-PL": $a30dba0e3d036c39$exports,
    "pt-BR": $6f919629ef2e1c62$exports,
    "pt-PT": $28d1e3bf8994ca96$exports,
    "ro-RO": $b3437fb2e3ddb32d$exports,
    "ru-RU": $5541691187ca14c1$exports,
    "sk-SK": $b48c119005e31a62$exports,
    "sl-SI": $741e7b53e60b061a$exports,
    "sr-SP": $b1ce8bd69a3b5574$exports,
    "sv-SE": $8f32a99efae22cc9$exports,
    "tr-TR": $89571b9fe6b62049$exports,
    "uk-UA": $4a43dd6fd8b0af8e$exports,
    "zh-CN": $92e311b3a49e73b5$exports,
    "zh-TW": $3c2a22427dbfaab5$exports
};






function $09e9a80ccce757b5$export$dc9c12ed27dd1b49(props, state, ref) {
    let { type: type = 'menu' , isDisabled: isDisabled , trigger: trigger = 'press'  } = props;
    let menuTriggerId = $6RQwO$reactariautils.useId();
    let { triggerProps: triggerProps , overlayProps: overlayProps  } = $6RQwO$reactariaoverlays.useOverlayTrigger({
        type: type
    }, state, ref);
    let onKeyDown = (e)=>{
        if (isDisabled) return;
        if (trigger === 'longPress' && !e.altKey) return;
        if (ref && ref.current) switch(e.key){
            case 'Enter':
            case ' ':
                if (trigger === 'longPress') return;
            // fallthrough
            case 'ArrowDown':
                // Stop propagation, unless it would already be handled by useKeyboard.
                if (!('continuePropagation' in e)) e.stopPropagation();
                e.preventDefault();
                state.toggle('first');
                break;
            case 'ArrowUp':
                if (!('continuePropagation' in e)) e.stopPropagation();
                e.preventDefault();
                state.toggle('last');
                break;
        }
    };
    let formatMessage = $6RQwO$reactariai18n.useMessageFormatter((/*@__PURE__*/$parcel$interopDefault($1d5711155cdf93a8$exports)));
    let { longPressProps: longPressProps  } = $6RQwO$reactariainteractions.useLongPress({
        accessibilityDescription: formatMessage('longPressMessage'),
        onLongPressStart () {
            state.close();
        },
        onLongPress () {
            state.open('first');
        }
    });
    let pressProps = {
        onPressStart (e) {
            // For consistency with native, open the menu on mouse/key down, but touch up.
            if (e.pointerType !== 'touch' && e.pointerType !== 'keyboard' && !isDisabled) // If opened with a screen reader, auto focus the first item.
            // Otherwise, the menu itself will be focused.
            state.toggle(e.pointerType === 'virtual' ? 'first' : null);
        },
        onPress (e) {
            if (e.pointerType === 'touch' && !isDisabled) state.toggle();
        }
    };
    triggerProps = $6RQwO$reactariautils.mergeProps(triggerProps, trigger === 'press' ? pressProps : longPressProps);
    return {
        menuTriggerProps: {
            ...triggerProps,
            id: menuTriggerId,
            onKeyDown: onKeyDown
        },
        menuProps: {
            ...overlayProps,
            'aria-labelledby': menuTriggerId
        }
    };
}


var $c8ded7c3bc67b89f$exports = {};

$parcel$export($c8ded7c3bc67b89f$exports, "useMenu", () => $c8ded7c3bc67b89f$export$38eaa17faae8f579);


function $c8ded7c3bc67b89f$export$38eaa17faae8f579(props, state, ref) {
    let { shouldFocusWrap: shouldFocusWrap = true , ...otherProps } = props;
    if (!props['aria-label'] && !props['aria-labelledby']) console.warn('An aria-label or aria-labelledby prop is required for accessibility.');
    let domProps = $6RQwO$reactariautils.filterDOMProps(props, {
        labelable: true
    });
    let { listProps: listProps  } = $6RQwO$reactariaselection.useSelectableList({
        ...otherProps,
        ref: ref,
        selectionManager: state.selectionManager,
        collection: state.collection,
        disabledKeys: state.disabledKeys,
        shouldFocusWrap: shouldFocusWrap
    });
    return {
        menuProps: $6RQwO$reactariautils.mergeProps(domProps, {
            role: 'menu',
            ...listProps
        })
    };
}


var $4124e6f4a4efab3d$exports = {};

$parcel$export($4124e6f4a4efab3d$exports, "useMenuItem", () => $4124e6f4a4efab3d$export$9d32628fc2aea7da);




function $4124e6f4a4efab3d$export$9d32628fc2aea7da(props, state, ref) {
    let { isSelected: isSelected , isDisabled: isDisabled , key: key , onClose: onClose , closeOnSelect: closeOnSelect , isVirtualized: isVirtualized , onAction: onAction  } = props;
    let role = 'menuitem';
    if (state.selectionManager.selectionMode === 'single') role = 'menuitemradio';
    else if (state.selectionManager.selectionMode === 'multiple') role = 'menuitemcheckbox';
    let labelId = $6RQwO$reactariautils.useSlotId();
    let descriptionId = $6RQwO$reactariautils.useSlotId();
    let keyboardId = $6RQwO$reactariautils.useSlotId();
    let ariaProps = {
        'aria-disabled': isDisabled,
        role: role,
        'aria-label': props['aria-label'],
        'aria-labelledby': labelId,
        'aria-describedby': [
            descriptionId,
            keyboardId
        ].filter(Boolean).join(' ') || undefined
    };
    if (state.selectionManager.selectionMode !== 'none') ariaProps['aria-checked'] = isSelected;
    if (isVirtualized) {
        ariaProps['aria-posinset'] = state.collection.getItem(key).index;
        ariaProps['aria-setsize'] = $6RQwO$reactstatelycollections.getItemCount(state.collection);
    }
    let onKeyDown = (e)=>{
        // Ignore repeating events, which may have started on the menu trigger before moving
        // focus to the menu item. We want to wait for a second complete key press sequence.
        if (e.repeat) return;
        switch(e.key){
            case ' ':
                if (!isDisabled && state.selectionManager.selectionMode === 'none' && closeOnSelect !== false && onClose) onClose();
                break;
            case 'Enter':
                // The Enter key should always close on select, except if overridden.
                if (!isDisabled && closeOnSelect !== false && onClose) onClose();
                break;
        }
    };
    let onPressStart = (e)=>{
        if (e.pointerType === 'keyboard' && onAction) onAction(key);
    };
    let onPressUp = (e)=>{
        if (e.pointerType !== 'keyboard') {
            if (onAction) onAction(key);
            // Pressing a menu item should close by default in single selection mode but not multiple
            // selection mode, except if overridden by the closeOnSelect prop.
            if (onClose && (closeOnSelect ?? state.selectionManager.selectionMode !== 'multiple')) onClose();
        }
    };
    let { itemProps: itemProps  } = $6RQwO$reactariaselection.useSelectableItem({
        selectionManager: state.selectionManager,
        key: key,
        ref: ref,
        shouldSelectOnPressUp: true
    });
    let { pressProps: pressProps  } = $6RQwO$reactariainteractions.usePress({
        onPressStart: onPressStart,
        onPressUp: onPressUp,
        isDisabled: isDisabled
    });
    let { hoverProps: hoverProps  } = $6RQwO$reactariainteractions.useHover({
        isDisabled: isDisabled,
        onHoverStart () {
            if (!$6RQwO$reactariainteractions.isFocusVisible()) {
                state.selectionManager.setFocused(true);
                state.selectionManager.setFocusedKey(key);
            }
        }
    });
    return {
        menuItemProps: {
            ...ariaProps,
            ...$6RQwO$reactariautils.mergeProps(itemProps, pressProps, hoverProps, {
                onKeyDown: onKeyDown
            })
        },
        labelProps: {
            id: labelId
        },
        descriptionProps: {
            id: descriptionId
        },
        keyboardShortcutProps: {
            id: keyboardId
        }
    };
}


var $09e5e649d8f56a83$exports = {};

$parcel$export($09e5e649d8f56a83$exports, "useMenuSection", () => $09e5e649d8f56a83$export$73f7a44322579622);

function $09e5e649d8f56a83$export$73f7a44322579622(props) {
    let { heading: heading , 'aria-label': ariaLabel  } = props;
    let headingId = $6RQwO$reactariautils.useId();
    return {
        itemProps: {
            role: 'presentation'
        },
        headingProps: heading ? {
            // Techincally, menus cannot contain headings according to ARIA.
            // We hide the heading from assistive technology, and only use it
            // as a label for the nested group.
            id: headingId,
            'aria-hidden': true
        } : {
        },
        groupProps: {
            role: 'group',
            'aria-label': ariaLabel,
            'aria-labelledby': heading ? headingId : undefined
        }
    };
}


$parcel$exportWildcard(module.exports, $09e9a80ccce757b5$exports);
$parcel$exportWildcard(module.exports, $c8ded7c3bc67b89f$exports);
$parcel$exportWildcard(module.exports, $4124e6f4a4efab3d$exports);
$parcel$exportWildcard(module.exports, $09e5e649d8f56a83$exports);


//# sourceMappingURL=main.js.map
